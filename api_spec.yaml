# Online editor at
# http://editor.swagger.io/#!/
####
---
swagger: '2.0'
info:
  title: HSPC API
  description: HSPC API Server
  version: "0.0.1"
  contact:
    name: API Support
    email: chandanchowdhury@ksu.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# the domain of the service
# TODO: Enable in production
# host: hspc.cs.ksu.com
# security definitions
#securityDefinitions:
#  api_key:
#    type: apiKey
#    name: api_key
#    in: header
# array of all schemes that your API supports
schemes:
  # TODO: Disable HTTP and enable HTTPS when implementing in production
  - http
  # - https
# will be prefixed to all paths
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
paths:
# API paths for Credential
  /credential:
    post:
      tags:
        - credential
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Credential'
      responses:
        200:
          description: Return the Credential ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update credential
      tags:
        - credential
      parameters:
        - name: body
          in: body
          required: true
          description: Updated Credential object
          schema:
            $ref: '#/definitions/Credential'
      responses:
        200:
          description: Returns success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /credential/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: string
        format: email
        required: true
    get:
      tags:
        - credential
      responses:
        200:
          description: The found Credential
          schema:
            $ref: '#/definitions/Credential'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an emailaddress, delete the credential
      tags:
        - credential
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Login
  /login/{emailaddress}/{password}:
    get:
      tags:
        - login
      parameters:
        - name: emailaddress
          description: Email address
          in: path
          type: string
          format: email
          required: true
        - name: password
          description: Password
          in: path
          type: string
          format: password
          required: true
      responses:
        200:
          description: Return a new session
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /logout/{session-id}:
    get:
      tags:
        - logout
      parameters:
        - name: session-id
          description: The session which need to be invalidated
          in: path
          type: string
          required: true
      responses:
        200:
          description: Get a student object using ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Address
  /address:
    post:
      tags:
        - address
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Address'
      responses:
        200:
          description: Return the ID of the newly created school
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /address/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Given a address id, return the details
      tags:
        - address
      responses:
        200:
          description: Address Information
          schema:
            $ref: '#/definitions/Address'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update address
      tags:
        - address
      parameters:
        - name: address
          description: address object
          in: body
          schema:
            $ref: '#/definitions/Address'
      responses:
        200:
          description: Returns address ID of the updated address
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given a address id, delete the address
      tags:
        - address
      responses:
        200:
          description: Return ID of the deleted address if successfully deleted
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

# API paths for School
  /school:
    post:
      description: Create a new school
      tags:
        - school
      parameters:
        - name: body
          in: body
          description: school object
          required: true
          schema:
            $ref: '#/definitions/School'
      responses:
        200:
          description: Return the ID of the newly created school
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update school
      tags:
        - school
      parameters:
        - name: school
          description: School object
          in: body
          schema:
            $ref: '#/definitions/School'
      responses:
        200:
          description: Returns success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /school/{id}:
    parameters:
      - name: id
        description: ID of the School
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Given a school id, return the details
      tags:
        - school
      responses:
        200:
          description: School Information
          schema:
            $ref: '#/definitions/School'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given a school id, delete the school
      tags:
        - school
      responses:
        200:
          description: Return ID of the deleted school if successfully deleted
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

# API paths for Advisor
  /advisor:
    post:
      tags:
        - advisor
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Advisor'
      responses:
        200:
          description: Return the Advisor ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update advisor
      tags:
        - advisor
      parameters:
        - name: body
          in: body
          required: true
          description: Updated Advisor object
          schema:
            $ref: '#/definitions/Advisor'
      responses:
        200:
          description: Returns success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /advisor/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: string
        format: email
        required: true
    get:
      tags:
        - advisor
      responses:
        200:
          description: Get a advisor object using emailaddress
          schema:
            $ref: '#/definitions/Advisor'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an emailaddress, delete the advisor
      tags:
        - advisor
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Student
  /student:
    post:
      tags:
        - student
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Student'
      responses:
        200:
          description: Return the Student ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update student
      tags:
        - student
      parameters:
        - name: body
          in: body
          required: true
          description: Updated Student object
          schema:
            $ref: '#/definitions/Student'
      responses:
        200:
          description: Returns success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /student/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: string
        format: email
        required: true
    get:
      tags:
        - student
      responses:
        200:
          description: Get a student object using ID
          schema:
            $ref: '#/definitions/Student'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an student ID, delete the student
      tags:
        - student
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Team
  /team:
    post:
      tags:
        - team
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Team'
      responses:
        200:
          description: Return the Team ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update team
      tags:
        - team
      parameters:
        - name: body
          in: body
          required: true
          description: Updated Team object
          schema:
            $ref: '#/definitions/Team'
      responses:
        200:
          description: Returns success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: string
        format: email
        required: true
    get:
      tags:
        - team
      responses:
        200:
          description: Get a team object using ID
          schema:
            $ref: '#/definitions/Team'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an team ID, delete the team
      tags:
        - team
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Problem
  /problem:
    post:
      tags:
        - problem
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Problem'
      responses:
        200:
          description: Return the Problem ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update problem
      tags:
        - problem
      parameters:
        - name: body
          in: body
          required: true
          description: Updated Problem object
          schema:
            $ref: '#/definitions/Problem'
      responses:
        200:
          description: Returns success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /problem/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: string
        format: email
        required: true
    get:
      tags:
        - problem
      responses:
        200:
          description: Get a problem object using ID
          schema:
            $ref: '#/definitions/Problem'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an problem ID, delete the problem
      tags:
        - problem
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Solution
  /solution:
    post:
      tags:
        - solution
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Solution'
      responses:
        200:
          description: Return the Solution ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update solution
      tags:
        - solution
      parameters:
        - name: body
          in: body
          required: true
          description: Updated Solution object
          schema:
            $ref: '#/definitions/Solution'
      responses:
        200:
          description: Returns success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /solution/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: string
        format: email
        required: true
    get:
      tags:
        - solution
      responses:
        200:
          description: Get a solution object using ID
          schema:
            $ref: '#/definitions/Solution'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an solution ID, delete the solution
      tags:
        - solution
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for TeamScore
  /teamscore:
    #get:
    #  tags: teamscore
    #  response:
    #    200:
    #      description: Retrun the list of all TeamScore
    #      schema:
    #        array:
    #          $ref: '#/definitions/TeamScore'
    post:
      tags:
        - teamscore
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TeamScore'
      responses:
        200:
          description: Return the TeamScore ID
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update teamscore
      tags:
        - teamscore
      parameters:
        - name: body
          in: body
          required: true
          description: Updated TeamScore object
          schema:
            $ref: '#/definitions/TeamScore'
      responses:
        200:
          description: Returns success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /teamscore/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: string
        format: email
        required: true
    get:
      tags:
        - teamscore
      responses:
        200:
          description: Get a teamscore object using ID
          schema:
            $ref: '#/definitions/TeamScore'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an teamscore ID, delete the teamscore
      tags:
        - teamscore
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

#
### Define all the Models
# Ref: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#schemaObject

definitions:
  Credential:
    type: object
    properties:
      credential_id:
        type: integer
        format: int64
        minimum: 1
      emailaddress:
        type: string
        format: email
      password:
        type: string
        format: password
      credential_active:
        type: boolean
        description: when an advisor registers herself, she will not be able to login unless admin has approved
        default: false
    required:
      - emailaddress
      - password

  Address:
    type: object
    properties:
      address_id:
        type: integer
        format: int64
        minimum: 1
      country:
        type: string
        description: Country
        default: USA
      zipcode:
        type: string
        description: Zip code
      state:
        type: string
        description: State
      city:
        type: string
        description: city or town
      line2:
        type: string
        description: optional details like street
      line1:
        type: string
        description: building and room
    required:
      - zipcode
      - state
      - city
      - line1

  # One school can have only one advisor, but an advisor can represent multiple schools
  School:
    type: object
    properties:
      school_id:
        type: integer
        format: int64
        minimum: 1
        description: ID of the school in DB
      school_name:
        type: string
        description: Name of the school
        example: Ideal World High School
      address_id:
        type: integer
        format: int64
      advisor_id:
        type: integer
        format: int64
        minimum: 1
      school_advisor_active:
        type: boolean
        description: When an advisor selects herself as a school representative, it has to be approved by admin
        default: false
    required:
      - school_name
      - address_id

  Advisor:
    type: object
    properties:
      advisor_id:
        type: integer
        format: int64
        minimum: 1
      advisor_name:
        type: string
      credential_id:
        type: integer
        format: int64
        minimum: 1
    required:
        - advisor_name
        - credential_id

  Student:
    type: object
    properties:
      student_id:
        type: integer
        format: int64
        minimum: 1
      student_name:
        type: string
      school_id:
        type: integer
        format: int64
      student_grade:
        type: string
        enum:
          - Freshmen
          - Sophomore
          - Junior
          - Senior
    required:
      - student_name
      - school_id
      - student_grade

  # Max 3 teams allowed per school, unless we have really small participation
  # in which case we can allow bigger schools to bring one more team.
  Team:
    type: object
    properties:
      team_id:
        type: integer
        format: int64
        minimum: 1
      team_name:
        type: string
      school_id:
        type: integer
        format: int64
        minimum: 1
      team_division:
        type: string
        enum:
          - B # for Beginner
          - A # for Advance
      team_members:
        type: array
        items:
          # array of student_ids
            type: integer
            format: int64
            minimum: 1
    required:
      - team_name
      - team_division
      - school_id

  Problem:
    type: object
    properties:
      problem_id:
        type: integer
        format: int64
        minimum: 1
      problem_desc:
        type: string
    required:
      - problem_desc

  Solution:
    type: object
    properties:
      solution_id:
        type: integer
        format: int64
        minimum: 1
      solution_desc:
        type: string
      problem_id:
        type: integer
        format: int64
        minimum: 1
    required:
      - solution_desc
      - problem_id

  TeamScore:
    type: object
    properties:
      team_id:
        type: integer
        format: int64
        minimum: 1
      problem_id:
        type: integer
        format: int64
        minimum: 1
      submit_time: # in case of a tie
        type: string
        format: DateTime
    required:
      - team_id
      - problem_id
      - submit_time

# This model will be used for Success and Failure both.
# In case of Success,
#   For Post requests, code will be the newly created ID message will be "Created"
#   For other requests, code will be zero and message will be "Suucess".
# In case of Failure, corresponding code and message will be set.
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
      fields:
        type: string