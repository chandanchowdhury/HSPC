# Online editor at
# http://editor.swagger.io/#!/
####
---
swagger: '2.0'
info:
  title: HSPC API
  description: HSPC API Server
  version: "0.0.1"
  contact:
    name: API Support
    email: chandanchowdhury@ksu.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# the domain of the service
# TODO: Enable in production
# host: hspc.cs.ksu.com
# security definitions
#securityDefinitions:
#  api_key:
#    type: apiKey
#    name: api_key
#    in: header
# array of all schemes that your API supports
schemes:
  # TODO: Disable HTTP and enable HTTPS when implementing in production
  - http
  # - https
# will be prefixed to all paths
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
paths:
# API paths for Credential
  /credential:
    post:
      description: Create Credential
      tags:
        - credential
      parameters:
        - name: credential
          in: body
          required: true
          schema:
            $ref: '#/definitions/Credential'
      responses:
        200:
          description: Returns the newly created Credential
          schema:
            $ref: '#/definitions/Credential'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update Credential
      tags:
        - credential
      parameters:
        - name: credential
          in: body
          required: true
          description: Updated Credential object
          schema:
            $ref: '#/definitions/Credential'
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /credential/{id}:
    parameters:
      - name: id
        description: CredentialID of the Credential
        in: path
        type: string
        format: email
        required: true
    get:
      description: Find Credential using email address
      tags:
        - credential
      responses:
        200:
          description: Returns the Credential
          schema:
            $ref: '#/definitions/Credential'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an emailaddress, delete the Credential
      tags:
        - credential
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Login
# TODO: Test/Validate login and logout functions
  /login/{emailaddress}/{password}:
    get:
      tags:
        - login
      parameters:
        - name: emailaddress
          description: Email address
          in: path
          type: string
          format: email
          required: true
        - name: password
          description: Password
          in: path
          type: string
          format: password
          required: true
      responses:
        200:
          description: Return a new session
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /logout/{session-id}:
    get:
      tags:
        - logout
      parameters:
        - name: session-id
          description: The session which need to be invalidated
          in: path
          type: string
          required: true
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Address
  /address:
    post:
      description: Create Address
      tags:
        - address
      parameters:
        - name: address
          in: body
          required: true
          schema:
            $ref: '#/definitions/Address'
      responses:
        200:
          description: Returns the newly created Address
          schema:
            $ref: '#/definitions/Address'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update Address
      tags:
        - address
      parameters:
        - name: address
          description: Address object
          in: body
          schema:
            $ref: '#/definitions/Address'
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /address/{id}:
    parameters:
      - name: id
        description: AddressID of the Address
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find Address using AddressID
      tags:
        - address
      responses:
        200:
          description: Returns Address
          schema:
            $ref: '#/definitions/Address'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Delete Address using AddressID
      tags:
        - address
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

# API paths for School
  /school:
    post:
      description: Create School
      tags:
        - school
      parameters:
        - name: school
          in: body
          description: School object
          required: true
          schema:
            $ref: '#/definitions/School'
      responses:
        200:
          description: Return the newly created School
          schema:
            $ref: '#/definitions/School'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update School
      tags:
        - school
      parameters:
        - name: school
          description: School object
          in: body
          schema:
            $ref: '#/definitions/School'
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: Return list of all Schools
      tags:
        - school
      responses:
        200:
          description: Returns School list
          schema:
              type: array
              items:
                $ref: '#/definitions/School'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /school/{id}:
    parameters:
      - name: id
        description: SchoolID of the School
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find School using SchoolID
      tags:
        - school
      responses:
        200:
          description: Returns School
          schema:
            $ref: '#/definitions/School'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Delete School using SchoolID
      tags:
        - school
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /school/{id}/students:
    parameters:
      - name: id
        description: SchoolID of the School
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find all Students in a School
      tags:
        - school
      responses:
        200:
          description: Returns the list of Students for the School
          schema:
            type: array
            items:
              $ref: '#/definitions/Student'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /school/{id}/teams:
    parameters:
      - name: id
        description: SchoolID of the School
        in: path
        type: integer
        format: int64
        required: true
    get:
      description:  Find all Teams in a School
      tags:
        - school
      responses:
        200:
          description: Returns the list of Teams for the School
          schema:
            type: array
            items:
              $ref: '#/definitions/Team'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

# API paths for Advisor
  /advisor:
    post:
      description: Create Advisor
      tags:
        - advisor
      parameters:
        - name: advisor
          in: body
          required: true
          schema:
            $ref: '#/definitions/Advisor'
      responses:
        200:
          description: Return the newly created Advisor
          schema:
            $ref: '#/definitions/Advisor'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update Advisor
      tags:
        - advisor
      parameters:
        - name: advisor
          in: body
          required: true
          description: Updated Advisor object
          schema:
            $ref: '#/definitions/Advisor'
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: Find all Advisors
      tags:
        - advisor
      responses:
        200:
          description: Returns list of Advisors
          schema:
            type: array
            items:
              $ref: '#/definitions/Advisor'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /advisor/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find Advisor using AdvisorID
      tags:
        - advisor
      responses:
        200:
          description: Returns Advisor
          schema:
            $ref: '#/definitions/Advisor'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an emailaddress, delete the advisor
      tags:
        - advisor
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Student
  /student:
    post:
      description: Create Student
      tags:
        - student
      parameters:
        - name: student
          in: body
          required: true
          schema:
            $ref: '#/definitions/Student'
      responses:
        200:
          description: Return the newly created Student
          schema:
            $ref: '#/definitions/Student'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update student
      tags:
        - student
      parameters:
        - name: student
          in: body
          required: true
          description: Updated Student object
          schema:
            $ref: '#/definitions/Student'
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /student/{id}:
    parameters:
      - name: id
        description: StudentID of the Student
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find Student using StudentID
      tags:
        - student
      responses:
        200:
          description: Returns Student
          schema:
            $ref: '#/definitions/Student'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an student ID, delete the student
      tags:
        - student
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Team
  /team:
    post:
      description: Create Team
      tags:
        - team
      parameters:
        - name: team
          in: body
          required: true
          schema:
            $ref: '#/definitions/Team'
      responses:
        200:
          description: Return the newly created Team
          schema:
            $ref: '#/definitions/Team'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update team
      tags:
        - team
      parameters:
        - name: team
          in: body
          required: true
          description: Updated Team object
          schema:
            $ref: '#/definitions/Team'
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/{id}:
    parameters:
      - name: id
        description: TeamID of the Team
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find Team using TeamID
      tags:
        - team
      responses:
        200:
          description: Returns Team
          schema:
            $ref: '#/definitions/Team'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an team ID, delete the team
      tags:
        - team
      responses:
        200:
          description: Return success
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/{team_id}/add/{student_id}:
    parameters:
      - name: team_id
        description: ID of the Team
        in: path
        type: integer
        format: int64
        required: true
      - name: student_id
        description: ID of the Student
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Add Student to a Team
      tags:
        - team
      responses:
        201:
          description: Student added to the Team, no data
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/{team_id}/remove/{student_id}:
    parameters:
      - name: team_id
        description: ID of the Team
        in: path
        type: integer
        format: int64
        required: true
      - name: student_id
        description: ID of the Student
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Remove Student from Team
      tags:
        - team
      responses:
        201:
          description: Student removed from the Team, no data
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /team/{id}/students:
    parameters:
      - name: id
        description: TeamID of the Team
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find Students in a Team
      tags:
        - team
      responses:
        200:
          description: Returns List of Students in a Team
          schema:
            type: array
            items:
              $ref: '#/definitions/Student'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

# API paths for Problem
  /problem:
    post:
      description: Create Problem
      tags:
        - problem
      parameters:
        - name: problem
          in: body
          required: true
          schema:
            $ref: '#/definitions/Problem'
      responses:
        200:
          description: Return the newly created Problem
          schema:
            $ref: '#/definitions/Problem'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update problem
      tags:
        - problem
      parameters:
        - name: problem
          in: body
          required: true
          description: Updated Problem object
          schema:
            $ref: '#/definitions/Problem'
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: List of all Problems
      tags:
        - problem
      responses:
        200:
          description: Returns list of all Problems
          schema:
            type: array
            items:
              $ref: '#/definitions/Problem'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /problem/{id}:
    parameters:
      - name: id
        description: ProblemID of the Problem
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find Problem using ProblemID
      tags:
        - problem
      responses:
        200:
          description: Returns Problem
          schema:
            $ref: '#/definitions/Problem'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Delete Problem using ProblemID
      tags:
        - problem
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /problem/{id}/solutions:
    parameters:
      - name: id
        description: SolutionID of the Solution
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find all Solutions to a Problem
      tags:
        - problem
      responses:
        200:
          description: Returns list of Solutions to a Problem
          schema:
            type: array
            items:
              $ref: '#/definitions/Solution'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for Solution
  /solution:
    post:
      description: Create Solution
      tags:
        - solution
      parameters:
        - name: solution
          in: body
          required: true
          schema:
            $ref: '#/definitions/Solution'
      responses:
        200:
          description: Return the newly created Solution
          schema:
            $ref: '#/definitions/Solution'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update solution
      tags:
        - solution
      parameters:
        - name: solution
          in: body
          required: true
          description: Updated Solution object
          schema:
            $ref: '#/definitions/Solution'
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /solution/{id}:
    parameters:
      - name: id
        description: SolutionID of the Solution
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find Solution using SolutionID
      tags:
        - solution
      responses:
        200:
          description: Return Solution
          schema:
            $ref: '#/definitions/Solution'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Delete Solution using SolutionID
      tags:
        - solution
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
# API paths for TeamScore
  /teamscore:
    post:
      description: Create TeamScore
      tags:
        - teamscore
      parameters:
        - name: teamscore
          in: body
          required: true
          schema:
            $ref: '#/definitions/TeamScore'
      responses:
        200:
          description: Return the newly created TeamScore
          schema:
            $ref: '#/definitions/TeamScore'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update teamscore
      tags:
        - teamscore
      parameters:
        - name: teamscore
          in: body
          required: true
          description: Updated TeamScore object
          schema:
            $ref: '#/definitions/TeamScore'
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    get:
      description: Find all TeamScores
      tags:
        - teamscore
      responses:
        200:
          description: Retrun the list of all TeamScore
          schema:
            type: array
            items:
              $ref: '#/definitions/TeamScore'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /teamscore/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Find TeamScore using TeamScoreID
      tags:
        - teamscore
      responses:
        200:
          description: Returns TeamScore
          schema:
            $ref: '#/definitions/TeamScore'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Delete TeamScore using TeamScoreID
      tags:
        - teamscore
      responses:
        200:
          description: Returns Success/Failure message with code
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

#
### Define all the Models
# Ref: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#schemaObject

definitions:
  Credential:
    type: object
    properties:
      credential_id:
        type: integer
        format: int64
        minimum: 1
      emailaddress:
        type: string
        format: email
        pattern: "([\\w+\\d+\\.\\_\\-]+@\\w+(\\.\\w+)+){1}"
      password:
        type: string
        format: password
      credential_active:
        type: boolean
        description: when an advisor registers herself, she will not be able to login unless admin has approved
        default: false
    required:
      - emailaddress
      - password

  Address:
    type: object
    properties:
      address_id:
        type: integer
        format: int64
        minimum: 1
      country:
        type: string
        description: Country
        default: USA
      zipcode:
        type: string
        description: Zip code
        pattern: "[1-9]\\d{4}"
      state:
        type: string
        description: State
      city:
        type: string
        description: city or town
      line2:
        type: string
        description: optional details like street
      line1:
        type: string
        description: building and room
    required:
      - zipcode
      - state
      - city
      - line1

  # One school can have only one advisor, but an advisor can represent multiple schools
  School:
    type: object
    properties:
      school_id:
        type: integer
        format: int64
        minimum: 1
        description: ID of the school in DB
      school_name:
        type: string
        description: Name of the school
        example: Ideal World High School
      address_id:
        type: integer
        format: int64
      school_advisor_active:
        type: boolean
        description: When an advisor selects herself as a school representative, it has to be approved by admin
        default: false
    required:
      - school_name
      - address_id

  Advisor:
    type: object
    properties:
      advisor_id:
        type: integer
        format: int64
        minimum: 1
      advisor_name:
        type: string
      credential_id:
        type: integer
        format: int64
        minimum: 1
    required:
        - advisor_name
        - credential_id

  Student:
    type: object
    properties:
      student_id:
        type: integer
        format: int64
        minimum: 1
      student_name:
        type: string
      school_id:
        type: integer
        format: int64
      student_grade:
        type: string
        enum:
          - Freshmen
          - Sophomore
          - Junior
          - Senior
    required:
      - student_name
      - school_id
      - student_grade

  # Max 3 teams allowed per school, unless we have really small participation
  # in which case we can allow bigger schools to bring one more team.
  Team:
    type: object
    properties:
      team_id:
        type: integer
        format: int64
        minimum: 1
      team_name:
        type: string
        minLength: 1
        maxLength: 20 # difficult print more than 20 char name in A4 sheet
      school_id:
        type: integer
        format: int64
        minimum: 1
      team_division:
        type: string
        enum:
          - Advance
          - Beginner
      team_members:
        type: array
        items:
          # array of student_ids
            type: integer
            format: int64
            minimum: 1
    required:
      - team_name
      - team_division
      - school_id

  Problem:
    type: object
    properties:
      problem_id:
        type: integer
        format: int64
        minimum: 1
      problem_category:
        type: string
        enum:
          - Advanced
          - Beginner
      problem_round:
        type: integer
        format: int64
        minimum: 1
      problem_desc:
        type: string
    required:
      - problem_desc

  Solution:
    type: object
    properties:
      solution_id:
        type: integer
        format: int64
        minimum: 1
      solution_desc:
        type: string
      problem_id:
        type: integer
        format: int64
        minimum: 1
    required:
      - solution_desc
      - problem_id

  TeamScore:
    type: object
    properties:
      team_id:
        type: integer
        format: int64
        minimum: 1
      problem_id:
        type: integer
        format: int64
        minimum: 1
      score_earned:
        type: integer
        format: int64
        minimum: 1
      submit_time: # in case of a tie
        type: string
        format: DateTime
    required:
      - team_id
      - problem_id
      - submit_time

# This model will be used for Success and Failure both.
# In case of Success,
#   For Post requests, code will be the newly created ID message will be "Created"
#   For other requests, code will be zero and message will be "Suucess".
# In case of Failure, corresponding code and message will be set.
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
      fields:
        type: string