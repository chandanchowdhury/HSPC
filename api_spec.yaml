# Online editor at
# http://editor.swagger.io/#!/
####
---
swagger: '2.0'
info:
  title: HSPC API
  description: HSPC API Server
  version: "0.0.1"
  contact:
    name: API Support
    email: chandanchowdhury@ksu.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
# the domain of the service
# TODO: Enable is production
# host: hspc.cs.ksu.com
# security definitions
#securityDefinitions:
#  api_key:
#    type: apiKey
#    name: api_key
#    in: header
# array of all schemes that your API supports
schemes:
  # TODO: Disable HTTP and enable HTTPS when implementing in production
  - http
  # - https
# will be prefixed to all paths
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
paths:
# API paths for Credential
  /credential:
    post:
      tags:
        - credential
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Credential'
      responses:
        200:
          description: Return the Credential ID
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update credential
      tags:
        - credential
      parameters:
        - name: body
          in: body
          required: true
          description: Updated Credential object
          schema:
            $ref: '#/definitions/Credential'
      responses:
        200:
          description: Returns success
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /credential/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: string
        format: email
        required: true
    get:
      tags:
        - credential
      responses:
        200:
          description: Get a credential object using emailaddress
          schema:
            $ref: '#/definitions/Credential'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given an emailaddress, delete the credential
      tags:
        - credential
      responses:
        200:
          description: Return success
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

# API paths for Address
  /address:
    post:
      description: create an address
      tags:
        - address
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Address'
      responses:
        200:
          description: Return the ID of the newly created school
          schema:
            type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /address/{id}:
    parameters:
      - name: id
        description: ID of the Address
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Given a address id, return the details
      tags:
        - address
      responses:
        200:
          description: Address Information
          schema:
            $ref: '#/definitions/Address'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update address
      tags:
        - address
      parameters:
        - name: address
          description: address object
          in: body
          schema:
            $ref: '#/definitions/Address'
      responses:
        200:
          description: Returns address ID of the updated address
          schema:
            type: integer
            format: int64
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given a address id, delete the address
      tags:
        - address
      responses:
        200:
          description: Return ID of the deleted address if successfully deleted
          schema:
            type: integer
            format: int64
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

# API paths for School
  /school:
    get:
      description: Return the list of schools
      tags:
        - school
      responses:
        200:
          description: List of Schools
          schema:
            type: array
            items:
              $ref: '#/definitions/School'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      description: Create a new school
      tags:
        - school
      parameters:
        - name: body
          in: body
          description: school object
          required: true
          schema:
            $ref: '#/definitions/School'
      responses:
        200:
          description: Return the ID of the newly created school
          schema:
            $ref: '#/definitions/School'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /schoo/{id}:
    parameters:
      - name: id
        description: ID of the School
        in: path
        type: integer
        format: int64
        required: true
    get:
      description: Given a school id, return the details
      tags:
        - school
      responses:
        200:
          description: School Information
          schema:
            $ref: '#/definitions/School'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    put:
      description: Update school
      tags:
        - school
      parameters:
        - name: school
          description: School object
          in: body
          schema:
            $ref: '#/definitions/School'
      responses:
        200:
          description: Returns School ID of the updated school
          schema:
            type: integer
            format: int64
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Given a school id, delete the school
      tags:
        - school
      responses:
        200:
          description: Return ID of the deleted school if successfully deleted
          schema:
            type: integer
            format: int64
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

# TODO: API paths for Advisor
# TODO: API paths for Login
# TODO: API paths for Student
# TODO: API paths for Team
# TODO: API paths for Problem
# TODO: API paths for Solution
# TODO: API paths for TeamScore

#
### Define all the Models
# Ref: https://github.com/OAI/OpenAPI-Specification/blob/3.0.0-rc0/versions/3.0.md#schemaObject

definitions:
  Credential:
    type: object
    properties:
      credential_id:
        type: integer
        format: int64
        minimum: 1
      emailaddress:
        type: string
        format: email
      password:
        type: string
        format: password
      credential_active:
        type: boolean
        description: when an advisor registers herself, she will not be able to login unless admin has approved
    required:
      - emailaddress
      - password

  Address:
    type: object
    properties:
      address_id:
        type: integer
        format: int64
        minimum: 1
      country:
        type: string
        description: Country
        default: USA
      zipcode:
        type: string
        description: Zip code
      state:
        type: string
        description: State
      city:
        type: string
        description: city or town
      line2:
        type: string
        description: optional details like street
      line1:
        type: string
        description: building and room
    required:
      - zipcode
      - state
      - city
      - line1

  # One school can have only one advisor, but an advisor can represent multiple schools
  School:
    type: object
    properties:
      school_id:
        type: integer
        format: int64
        minimum: 1
        description: ID of the school in DB
      school_name:
        type: string
        description: Name of the school
        example: Ideal World High School
      address_id:
        type: integer
        format: int64
      advisor_id:
        type: integer
        format: int64
        minimum: 1
      school_advisor_active:
        type: boolean
        description: When an advisor selects herself as a school representative, it has to be approved by admin
    required:
      - school_name
      - address_id

  Advisor:
    type: object
    properties:
      advisor_id:
        type: integer
        format: int64
        minimum: 1
      advisor_name:
        type: string
      credential_id:
        type: integer
        format: int64
        minimum: 1
    required:
        - advisor_name
        - credential_id

  Student:
    type: object
    properties:
      student_id:
        type: integer
        format: int64
        minimum: 1
      student_name:
        type: string
      school_id:
        type: integer
        format: int64
      student_grade:
        type: string
        enum:
          - Freshmen
          - Sophomore
          - Junior
          - Senior
    required:
      - student_name
      - school_id
      - student_grade

  # Max 3 teams allowed per school, unless we have really small participation
  # in which case we can allow bigger schools to bring one more team.
  Team:
    type: object
    properties:
      team_id:
        type: integer
        format: int64
        minimum: 1
      team_name:
        type: string
      school_id:
        type: integer
        format: int64
        minimum: 1
      team_division:
        type: string
        enum:
          - B # for Beginner
          - A # for Advance
      team_members:
        type: array
        items:
          # array of student_ids
            type: integer
            format: int64
            minimum: 1
    required:
      - team_name
      - team_division
      - school_id

  Problem:
    type: object
    properties:
      problem_id:
        type: integer
        format: int64
        minimum: 1
      problem_desc:
        type: string
    required:
      - problem_desc

  Solution:
    type: object
    properties:
      solution_id:
        type: integer
        format: int64
        minimum: 1
      solution_desc:
        type: string
      problem_id:
        type: integer
        format: int64
        minimum: 1
    required:
      - solution_desc
      - problem_id

  TeamScore:
    type: object
    properties:
      team_id:
        type: integer
        format: int64
        minimum: 1
      problem_id:
        type: integer
        format: int64
        minimum: 1
      submit_time: # in case of a tie
        type: string
        format: DateTime
    required:
      - team_id
      - problem_id
      - submit_time

  Error:
    type: object
    properties:
      code:
        type: integer
        format: int64
      message:
        type: string
      fields:
        type: string